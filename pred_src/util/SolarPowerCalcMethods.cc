/**************************************************************************/
/*!
    @file     SolarPowerCalcMethods.cc
    @author1  Justin Albert (jalbert@uvic.ca)
    @author2  Patrick Ryan  (patrick.ryan5787@gmail.com)
    @author3  Aravind Shaj  (aravindshaj@gmail.com)
    @author4  Hannah Swan   (hannah.swan.3.14@gmail.com)
    @license  GPL

    This is the class containing the solar power calculation methods to
    determine the amount of solar power (in Watts) both generated by the
    solar panels and collected by the onboard batteries (i.e., accounting
    for, and thus subtracting, all known losses) at any given time.

    @section  HISTORY

    v1.0  - First version
*/
/**************************************************************************/

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

//-----------------------
// This Class's Header --
//-----------------------

#include "SolarPowerCalcMethods.hh"

//-------------------------------
// Collaborating Class Headers --
//-------------------------------

#include "../state/ALTAIR_state.hh"
#include "../state/ExternalEnvironState.hh"
#include "../state/BalloonAndPfoilState.hh"
#include "../state/GondolaAndPropState.hh"

//              ----------------------------------------
//              -- Public Member Function Definitions --
//              ----------------------------------------
//
float SolarPowerCalcMethods::getInstantaneousSolarPower()
{
	return 1.5		;
}


//
float SolarPowerCalcMethods::getSolarEnergyForNextMinute()
{
	return 2.5 		;
}

//              -------------------------------------------
//              -- Protected Member Function Definitions --
//              -------------------------------------------
//
//
float SolarPowerCalcMethods::getSolarPanelProjectedArea()
{
	return 3.5 		;
}

std::vector<float> SolarPowerCalcMethods::getSunToBalloonVector()
{
        std::vector<float>    sunToBalVector                                    ;
        ExternalEnvironState* extEnv            = altairState->getExtEnv()      ;

        long int              unixTime          = extEnv->getCurrentTime()      ;
        float                 currentLat        = extEnv->getCurrentLat()       ;
        float                 currentLon        = extEnv->getCurrentLon()       ;


	return sunToBalVector;
}
